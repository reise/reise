FORMAT: 1A
HOST: http://localhost:3000

# Reise API Endpoint Reference
Test API blueprint flie

Author: Manoj Chalode <chalodem@gmail.com>

Version: 1.0


# Group USER

User APIs

## Login  → JSON [POST /api/user/login]

Get the user info based on username or password.

+ Request  (application/json)

        {
            username: "john_doe",
            password:"12345"
        }

+ Response 200 (application/json)

    + Body
    
            {
                data: {
                    id: "1",
                    username: "john_doe",
                    email: "john_doe@gmail.com",
                    name: "John Doe",
                    password: null,
                    isAdmin: false
                },
                status: true,
                messages: []
            }

+ Request  (application/json)

        {
            username: "",
            password:""
        }

+ Response 200 (application/json)

    + Body
    
            {
                data: null,
                status: false,
                messages: [
                    "username or email can not be left blank",
                    "password can not be left blank"
                ]
            }

## Register  → JSON [POST /api/user/register]

Create a new user by providing required ifnromation.

+ Request  (application/json)

        {
            username: "john_doe",
            email: "john_doe@gmail.com",
            name: "John Doe",
            password: "123qweqwe"
        }

+ Response 200 (application/json)

    + Body
    
            {
                data: {
                    id: "1",
                    username: "john_doe",
                    email: "john_doe@gmail.com",
                    name: "John Doe",
                    password: null,
                    isAdmin: false
                },
                status: true,
                messages: []
            }

+ Request  (application/json)

        {
            username: "",
            email: "",
            name: "",
            password: ""
        }

+ Response 200 (application/json)

    + Body

            {
                data: null,
                status: false,
                messages: [
                    "username or email can not be left blank",
                    "name can not be left blank",
                    "password can not be left blank",
                    "username should be atleast 5 letters long",
                    "password should be atleast 6 letters long",
                    "email is invalid"
                ]
            }


# Group TEMPLE

Temple APIs

## Get Temple List  → JSON [GET /api/temples/all]

Get all temples. Alternate URL - /api/temples

+ Request  (application/json)

+ Response 200 (application/json)

    + Body

            {
                data: [
                {
                    id: "5ac7cc259ed19d99651dec26",
                    imageUrls: [
                        "https://www.trawell.in/admin/images/upload/69969945Alibaug_Anjarle_Beach_Main.jpg"
                    ],
                    name: "Anjarle Beach & Ganesh Temple"
                },
                {
                    id: "5ac7cc259ed19d99651dec24",
                    imageUrls: [
                        "https://www.trawell.in/admin/images/upload/263971748Pune_Bhimshankar_Main.jpg"
                    ],
                    name: "Bhimashankar Temple"
                }],
                status: true,
                messages: []
            }

## Get Temple Details  → JSON [GET /api/temples/:id]

Get temples details with id.

+ Request  (application/json)

        valid temple id e.g. /api/temples/5ac7cc259ed19d99651dec26

+ Response 200 (application/json)

    + Body

            {
                data: {
                    id: "5ac7cc259ed19d99651dec26",
                    imageUrls: [
                        "https://www.trawell.in/admin/images/upload/69969945Alibaug_Anjarle_Beach_Main.jpg"
                    ],
                    name: "Anjarle Beach & Ganesh Temple",
                    description: "At a distance of 23 km from Dapoli, 41 km from Harihareshwar, and 152 km from Alibaug, Anjarle Beach is a beautiful and unspoilt white sand beach located at Anjarle village in Dapoli taluk of Ratnagiri district. Anjarle has one of the finest beaches in the Konkan region of Maharashtra and also a popular weekend getaway from Mumbai.  Anjarle is famous for its white sandy beach and endless rows of coconut palms. The beach is located near the lagoon of the river Jog, which is about 2 km long and the coastline of the beach is also smooth. Overall, the blue waters and the white sand create a pristine feel to the place and the ambience is perfect for a getaway.  Anjarle Beach is an idyllic place for the family to enjoy swimming. For the adventurous, water sports like parasailing, snorkeling and wind surfing are available. During low tide Anjarle Beach attracts a lot of birds making this place a bird watchers paradise. Visit the beach in the evenings when hundreds of fishing boats come back after their day at sea and gather to auction their catch. Fresh sea food is available at the shacks on the beach. Anjarle is also famous for its ancient Ganesh Temple which stands on a cliff. The Kadyawarcha Ganapathi Temple is believed to have been built in 1150 AD using wooden pillars. It was renovated during the 18th century. Earlier devotees had to cross Jog River in a boat and then climb the hill to reach the temple. Now a bridge has been built so pilgrims can take their vehicle right up to the entrance of the temple. Ganapathi at this temple has a trunk curved towards right. This is unusual because Ganesh idols tend to have trunks curved towards the left. Devotees believe that Kadyawarcha Ganapathi is a live deity who will come to their rescue whenever they are in trouble."
                },
                status: true,
                messages: []
            }

+ Request  (application/json)

        invalid temple id e.g. /api/temples/invalid

+ Response 200 (application/json)

    + Body

            {
                data: null,
                status: false,
                messages: [
                    "Cast to ObjectId failed for value \"asd\" at path \"_id\" for model \"temples\""
                ]
            }

## Create Temple  → JSON [PUT /api/temples/create]

Create new temple.

+ Request  (application/json)

        {
            name: "New Temple",
            //optional properties
            imageUrls: [
                "https://www.trawell.in/admin/images/upload/860652183Pune_Morgaon_Main.jpg"
            ],
            description:"test Description",
            additionalInfo: {
                key1:"value1",
                key2:"value2"
            }
        }

+ Response 200 (application/json)

    + Body

            {
                data: {
                    id: "5ac7f12e2630de7ee61eec00",
                    imageUrls: [
                        "https://www.trawell.in/admin/images/upload/860652183Pune_Morgaon_Main.jpg"
                    ],
                    name: "New Temple",
                    description: "test Description",
                    additionalInfo: {
                        key2: "value2",
                        key1: "value1"
                    }
                },
                status: true,
                messages: []
            }

+ Request  (application/json)

        {
            name: ""
        }

+ Response 200 (application/json)

    + Body

            {
                data: null,
                status: false,
                messages: [
                    "temple name is required"
                ]
            }

## Update Temple  → JSON [POST /api/temples/update]

Update temple.

+ Request  (application/json)

        {
            //valid id
            id: "5ac7f12e2630de7ee61eec00",
            name: "New Temple",
            imageUrls: [
                "https://www.trawell.in/admin/images/upload/860652183Pune_Morgaon_Main.jpg"
            ],
            description:"test Description",
            additionalInfo: {
                key1:"value1",
                key2:"value2",
                key3:"value3"
            }
        }

+ Response 200 (application/json)

    + Body

            {
                data: {
                    id: "5ac7f12e2630de7ee61eec00",
                    imageUrls: [
                        "https://www.trawell.in/admin/images/upload/860652183Pune_Morgaon_Main.jpg"
                    ],
                    name: "New Temple",
                    description: "test Description",
                    additionalInfo: {
                        key3: "value3",
                        key2: "value2",
                        key1: "value1"
                    }
                },
                status: true,
                messages: []
            }

+ Request  (application/json)

        {
            //invalid id
            id: "5ac7f12e2630de7ee61",
            name: "New Temple",
            imageUrls: [
                "https://www.trawell.in/admin/images/upload/860652183Pune_Morgaon_Main.jpg"
            ],
            description:"test Description",
            additionalInfo: {
                key1:"value1",
                key2:"value2",
                key3:"value3"
            }
        }

+ Response 200 (application/json)

    + Body

            {
                data: null,
                status: false,
                messages: [
                    "Cast to ObjectId failed for value \"5ac7f12e2630de7ee61\" at path \"_id\" for model \"temples\""
                ]
            }

+ Request  (application/json)

        {
            id: "5ac7f12e2630de7ee61eec00",
            name: "",
            imageUrls: [
                "https://www.trawell.in/admin/images/upload/860652183Pune_Morgaon_Main.jpg"
            ],
            description:"test Description",
            additionalInfo: {
                key1:"value1",
                key2:"value2",
                key3:"value3"
            }
        }

+ Response 200 (application/json)

    + Body

            {
                data: null,
                status: false,
                messages: [
                    "temple name is required"
                ]
            }

## Delete Temple Details  → JSON [DELETE /api/temples/:id]

Delete temples details with id

+ Request  (application/json)

        valid temple id e.g. /api/temples/5ac7cc259ed19d99651dec26

+ Response 200 (application/json)

    + Body

            {
                data: true,
                status: true,
                messages: []
            }

+ Request  (application/json)

        Invalid temple id e.g. /api/temples/invalid

+ Response 200 (application/json)

    + Body

            {
                data: null,
                status: false,
                messages: [
                    false
                ]
            }

# Group Booking

Booking APIs

## Get Booking List  → JSON [GET /api/bookings/all]

Get all bookings. Alternate URL - /api/bookings

+ Request  (application/json)

+ Response 200 (application/json)

    + Body

            {
                "data": [
                    {
                        "id": "5ac7ff820fb00a105fba28ac",
                        "templeId": "5ac7cc259ed19d99651dec24",
                        "userId": "5aa3e7f63259c01048902eaa",
                        "templeName": "Bhimashankar Temple",
                        "userName": "Manoj Chalode",
                        "price": "1700"
                    },
                    {
                        "id": "5ac8024b4ce969176deb6d6d",
                        "templeId": "5ac7cc259ed19d99651dec24",
                        "userId": "5aa3e7f63259c01048902eaa",
                        "templeName": "Bhimashankar Temple",
                        "userName": "Manoj Chalode",
                        "price": "1700"
                    }
                ],
                "status": true,
                "messages": []
            }

## Get Booking Details  → JSON [GET /api/bookings/:id]

Get booking details with id.

+ Request  (application/json)

        valid booking id e.g. /api/bookings/5ac7ff820fb00a105fba28ac

+ Response 200 (application/json)

    + Body

            {
                "data": {
                    "id": "5ac7ff820fb00a105fba28ac",
                    "templeId": "5ac7cc259ed19d99651dec24",
                    "userId": "5aa3e7f63259c01048902eaa",
                    "templeName": "Bhimashankar Temple",
                    "userName": "Manoj Chalode",
                    "price": "1700",
                    "remarks": "remarks added and updated"
                },
                "status": true,
                "messages": []
            }

+ Request  (application/json)

        invalid temple id e.g. /api/bookings/invalid

+ Response 200 (application/json)

    + Body

            {
                "data": null,
                "status": false,
                "messages": [
                    "Cast to ObjectId failed for value \"invalid\" at path \"_id\" for model \"bookings\""
                ]
            }

## Create Booking  → JSON [PUT /api/bookings/create]

Create new booking.

+ Request  (application/json)

        {
            templeId: "5ac7cc259ed19d99651dec26",
            userId: "5aa3e7f63259c01048902eaa",
            templeName: "Anjarle Beach & Ganesh Temple",
            userName: "Manoj Chalode",
            price: "1200",
            //optional properties
            remarks: "advanced booking"
        }

+ Response 200 (application/json)

    + Body

            {
                data: {
                    id: "5ac7ff820fb00a105fba28ac",
                    templeId: "5ac7cc259ed19d99651dec26",
                    userId: "5aa3e7f63259c01048902eaa",
                    templeName: "Anjarle Beach & Ganesh Temple",
                    userName: "Manoj Chalode",
                    price: "1200",
                    remarks: "advanced booking"
                },
                status: true,
                messages: []
            }

+ Request  (application/json)

        {
            templeId : "",
            userId: "",
            templeName: "",
            userName: "",
            price: ""
        }

+ Response 200 (application/json)

    + Body

            {
                data: null,
                status: false,
                messages: [
                    "temple id can not be left blank",
                    "user id can not be left blank",
                    "temple name can not be left blank",
                    "user name can not be left blank",
                    "price can not be left blank"
                ]
            }

## Update Booking  → JSON [POST /api/bookings/update]

Update booking.

+ Request  (application/json)

        {
            //valid id
            "id":"5ac7ff820fb00a105fba28ac",
            "templeId":"5ac7cc259ed19d99651dec24",
            "userId":"5aa3e7f63259c01048902eaa",
            "templeName":"Bhimashankar Temple",
            "userName":"Manoj Chalode",
            "price":"1700",
            "remarks": "remarks added and updated"
        }

+ Response 200 (application/json)

    + Body

            {
                "data": {
                    "id": "5ac7ff820fb00a105fba28ac",
                    "templeId": "5ac7cc259ed19d99651dec24",
                    "userId": "5aa3e7f63259c01048902eaa",
                    "templeName": "Bhimashankar Temple",
                    "userName": "Manoj Chalode",
                    "price": "1700",
                    "remarks": "remarks added and updated"
                },
                "status": true,
                "messages": []
            }

+ Request  (application/json)

        {
            //invalid id
            "id":"invalid",
            "templeId":"5ac7cc259ed19d99651dec24",
            "userId":"5aa3e7f63259c01048902eaa",
            "templeName":"Bhimashankar Temple",
            "userName":"Manoj Chalode",
            "price":"1700",
            "remarks": "remarks added and updated"
        }

+ Response 200 (application/json)

    + Body

            {
                data: null,
                status: false,
                messages: [
                    "Cast to ObjectId failed for value \"invalid\" at path \"_id\" for model \"bookings\""
                ]
            }

+ Request  (application/json)

        {
            "id":"",
            "templeId":"",
            "userId":"",
            "templeName":"",
            "userName":"",
            "price":"",
            "remarks": ""
        }

+ Response 200 (application/json)

    + Body

            {
                "data": null,
                "status": false,
                "messages": [
                    "booking id can not be left blank",
                    "temple id can not be left blank",
                    "user id can not be left blank",
                    "temple name can not be left blank",
                    "user name can not be left blank",
                    "price can not be left blank"
                ]
            }

## Delete Booking Details  → JSON [DELETE /api/bookings/:id]

Delete temples details with id

+ Request  (application/json)

        valid temple id e.g. /api/bookings/5ac7cc259ed19d99651dec26

+ Response 200 (application/json)

    + Body

            {
                data: true,
                status: true,
                messages: []
            }

+ Request  (application/json)

        Invalid temple id e.g. /api/bookings/invalid

+ Response 200 (application/json)

    + Body

            {
                data: null,
                status: false,
                messages: [
                    false
                ]
            }